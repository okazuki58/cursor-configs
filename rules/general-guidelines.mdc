---
description: "リーダブルコードと基本的なソフトウェア開発原則"
globs: ["**/*.rb", "**/*.js", "**/*.ts", "**/*.py", "**/*.java", "**/*.go"]
alwaysApply: true
---

# コーディングの基本指針

## リーダブルコード
- 意図が伝わる名前を付ける（略語を避け、役割を明確に）。
- メソッドや関数は1つの責務に限定し、10〜15行以内を目安にする。
- コメントは「なぜそうしたか」を説明するために使う。コードで表現できることはコメントにしない。
- ネストは浅く保ち、早期リターンで可読性を上げる。
- **try-catchブロックは最小限に留める**：必要な処理のみを含め、catch範囲を明確にする。複数の例外が発生する可能性がある場合は、それぞれ個別にハンドリングする。

## 責務の分離
- 単一責務の原則（SRP）を徹底する。
- データ層・ロジック層・表示層を分離する。
- 再利用性とテスト容易性を常に意識する。

## テスト容易性を考慮した設計
- **依存注入（DI）を積極的に活用する**：外部依存（API、データベース、ファイルシステム等）をコンストラクタまたは関数引数で受け取る。
- **純粋関数を優先する**：同じ入力に対して常に同じ出力を返し、副作用のない関数を設計する。
- **クラスは小さく、責務を限定する**：テスト対象を明確にし、モックやスタブが容易になるよう設計する。
- **抽象化レイヤーを設ける**：インターフェースやプロトコルを定義し、具体実装をテスト時に差し替え可能にする。
- **状態変更を最小限にする**：グローバル変数や共有状態を避け、状態変更が必要な場合は明示的に管理する。
- **副作用を分離する**：I/O操作や外部API呼び出しをビジネスロジックから分離し、それぞれ独立してテストできるようにする。

## ソフトウェア開発原則
- DRY（Don’t Repeat Yourself）を守る。共通処理をまとめる。
- KISS（Keep It Simple, Stupid）を徹底し、複雑さを避ける。
- YAGNI（You Aren’t Gonna Need It）：不要な機能は追加しない。
- 継続的にリファクタリングを行い、技術的負債を減らす。
- テストを前提にした設計を行う。
- **基本的にシングルトンパターンは採用しないが、メモリ効率やインスタンス生成コストを考慮して有効な場合は採用してよい。**

## コードスタイル
- 一貫したインデント・空白・命名規則を守る。
- 言語に合わせたリンターやフォーマッター（例: Rubocop, ESLint, Prettier）を導入する。
- 絵文字を使用しないことを最重要とする。

## 開発プロセス
- **エラー修正を急ぐあまりルールを無視してはならない。速度よりも品質を優先する。**
- コードレビューや設計原則を軽視して手抜きをしない。
- 「とりあえず動けばいい」という思考は技術的負債を生む最悪の行為である。
- 時間がない場合でも、適切な型定義や設計を怠らない。
