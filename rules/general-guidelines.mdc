---
description: "リーダブルコードと基本的なソフトウェア開発原則"
globs: ["**/*.rb", "**/*.js", "**/*.ts", "**/*.py", "**/*.java", "**/*.go"]
alwaysApply: true
---

# コーディングの基本指針

## リーダブルコード
- 意図が伝わる名前を付ける（略語を避け、役割を明確に）。
- メソッドや関数は1つの責務に限定し、10〜15行以内を目安にする。
- コメントは「なぜそうしたか」を説明するために使う。コードで表現できることはコメントにしない。
- ネストは浅く保ち、早期リターンで可読性を上げる。

## 責務の分離
- 単一責務の原則（SRP）を徹底する。
- データ層・ロジック層・表示層を分離する。
- 再利用性とテスト容易性を常に意識する。

## ソフトウェア開発原則
- DRY（Don’t Repeat Yourself）を守る。共通処理をまとめる。
- KISS（Keep It Simple, Stupid）を徹底し、複雑さを避ける。
- YAGNI（You Aren’t Gonna Need It）：不要な機能は追加しない。
- 継続的にリファクタリングを行い、技術的負債を減らす。
- テストを前提にした設計を行う。
- **基本的にシングルトンパターンは採用しないが、メモリ効率やインスタンス生成コストを考慮して有効な場合は採用してよい。**

## コードスタイル
- 一貫したインデント・空白・命名規則を守る。
- 言語に合わせたリンターやフォーマッター（例: Rubocop, ESLint, Prettier）を導入する。
