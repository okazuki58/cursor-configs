---
description: "TypeScript プロジェクト指示書（共通ルール）"
globs: ["src/**/*.ts", "config/**/*.ts", "scripts/**/*.ts", "test/**/*.ts"]
alwaysApply: true
---

# TypeScript プロジェクト指示書

## 開発姿勢（最重要原則）

* **実用性と開発効率を重視**。完璧な型定義よりも、動作する機能の実装を優先する。
* 複雑な外部ライブラリや時間的制約がある場合は、`any`や`as`を使用して開発を進める。
* 型安全性は重要だが、開発速度とのバランスを考慮し、実用的な判断を行う。
* strict設定は基本的に有効にするが、プロジェクトの要件に応じて調整可能。

## 目的

* 型安全・可読性・変更容易性を最優先する。
* 曖昧な型や副作用の拡散を防ぎ、**境界で制御**する。

## 適用範囲

* 本ルールは TypeScript のみを対象とし、フロントエンド技術固有（React 等）は含めない。

## ディレクトリ構成

* 機能単位（feature-based）で分割する。
* アプリケーションコードは `src/` に集約する。
* 共有ユーティリティは `src/shared/` または `src/lib/` に集約する。
* 共通型は `src/types/` に切り出し再利用する。
* パスエイリアス（例：`@/`）を採用し、深い相対パスを避ける。

## tsconfig 原則（必須方針）

* 厳格モードを基本とし、次を可能な限り有効化する：

  * `strict` 系全般、`noUncheckedIndexedAccess`, `exactOptionalPropertyTypes`, `noImplicitOverride`, `noFallthroughCasesInSwitch`。
* 型エラーはビルドを通過させない。

## 型定義原則

* `any` は原則禁止。ただし、テストファイルや複雑な外部ライブラリとの境界では実用性を優先して使用可能。
* **型アサーション（`as`）は実用的に使用**。型の完全性よりも開発効率を重視し、テストや外部ライブラリのモック作成では積極的に使用する。
* `unknown` は外部入力の境界で使用し、その後適切な型に変換する。
* 外部 API やファイル入出力は、**型定義＋実行時スキーマ検証**（zod/valibot 等）を原則とする。
* 型パラメータは意味と制約（`extends` 等）を明示する。過度な抽象化は避ける。
* Union は**判別可能 Union**を優先する。
* 返り値型は原則明示（可読性を損なう暗黙推論は避ける）。

## モジュール設計・依存管理

* 公開 API は `index.ts` 経由で明示エクスポートする。内部実装の漏出を防ぐ。
* 循環依存を禁止する（検出ルールを適用）。
* サードパーティは用途最小限で固定バージョン／レンジを管理し、更新方針（Renovate 等）を定める。

## コーディングスタイル（最低ライン）

* ESLint＋Prettier を導入し、少なくとも次を満たす：

  * 未使用コード禁止、暗黙の `any` 禁止、到達不能コード検出、未処理 Promise 禁止、`no-var`／`prefer-const`。
  * import 並びの一貫性・重複禁止・解決不能 import の検出。
  * `@typescript-eslint` 推奨セットをベースに、プロジェクト合意の逸脱のみ許容。

## 非同期・エラーハンドリング

* 非同期は `async/await` を優先する。
* 失敗設計を前提とし、**伝播方法を統一**する（例：Result パターン／例外のいずれか）。
* タイムアウト・リトライ・キャンセル（AbortController 等）の方針を定義する。
* 例外には文脈（原因種別・相関 ID 等）を付加し、呼び出し側が判断可能な情報を返す。

## API／外部データ境界

* フェッチ／入出力の**境界で検証**し、内部では安全なドメイン型のみを扱う。
* DTO⇄ドメイン型の変換ポイントを固定し、変換は一箇所に集約する。
* エラーは**ネットワーク／プロトコル／スキーマ不一致**を区別して扱う。

## テスト方針

* 重要ユーティリティや複雑な型操作はユニットテストを付与する。
* 型境界には型テスト（tsd 等）を可能な範囲で導入する。
* モックは公開 API 観点で最小限とし、内部実装依存を避ける。

## 命名・ファイル規約

* 型・インターフェースは `PascalCase`。関数・変数は `camelCase`。定数は必要に応じて `SCREAMING_SNAKE_CASE`。
* 型分離を行う場合は `*.types.ts` を用いる。
* ファイル名・ディレクトリ名は一貫した規則に従う（例：`kebab-case.ts`）。

## 品質ゲート

* すべてのコミットで Lint・型チェックを通す（CI 必須）。
* 重要パスは最低カバレッジを設定し、閾値を下げない。
* パフォーマンス・セキュリティは静的検査（依存脆弱性スキャン等）を CI に組み込む。

## 逸脱の扱い

* やむを得ないルール逸脱は、PR 上で理由・代替案・影響範囲を明記し、レビュー承認を得ること。
* 逸脱は恒久化しない。次回改善タスクに登録し、解消期限を設ける。

